"""
ProcessadorOficio V2 - Pipeline otimizado com valida√ß√£o de CPF e extra√ß√£o seletiva.
Vers√£o 2.0 - Processa apenas p√°ginas relevantes, valida CPF, extrai n√∫mero de ordem
"""

import os
import json
import logging
import time
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

import pymupdf
from openai import OpenAI

from .detector import DetectorOficio
from .detector_anexo import DetectorAnexoII
from .detector_processamento import DetectorProcessamento
from .schemas import OficioRequisitorio

logger = logging.getLogger(__name__)


class ProcessadorOficio:
    """
    Pipeline V2 para processamento de Of√≠cios Requisit√≥rios:
    1. Buscar TODOS os of√≠cios no PDF
    2. Validar CPF em cada of√≠cio
    3. Processar apenas o of√≠cio correto
    4. Detectar ANEXO II e PROCESSAMENTO
    5. Extrair dados estruturados (GPT-4o-mini) - APENAS p√°ginas relevantes
    6. Validar dados (Pydantic)
    7. Salvar no PostgreSQL (upsert)
    """
    
    def __init__(self, openai_api_key: str, db_config: Dict[str, Any]):
        """
        Inicializa o processador V2.
        
        Args:
            openai_api_key: Chave da API OpenAI
            db_config: Configura√ß√µes do banco PostgreSQL
        """
        # Inicializar OpenAI client
        self.client = OpenAI(api_key=openai_api_key)
        self.modelo_gpt = "gpt-4o-mini"
        
        # Configura√ß√µes do banco
        self.db_config = db_config
        
        # Inicializar detectores V2
        self.detector = DetectorOficio()
        self.detector_anexo = DetectorAnexoII()
        self.detector_proc = DetectorProcessamento()  # NOVO!

        logger.info("ProcessadorOficio V2 inicializado")
    
    def processar_arquivo(self, pdf_path: str, cpf_numerico: str) -> Dict[str, Any]:
        """
        Processa um √∫nico arquivo PDF com valida√ß√£o de CPF.
        
        V2: Busca todos os of√≠cios, valida CPF, processa apenas o correto.
        
        Args:
            pdf_path: Caminho para o arquivo PDF
            cpf_numerico: CPF esperado (apenas n√∫meros)
            
        Returns:
            Dict com resultado do processamento
        """
        inicio = time.time()
        
        try:
            logger.info(f"üîÑ Iniciando processamento V2: {pdf_path}")
            
            # Validar arquivo PDF
            if not self.detector.validar_pdf(pdf_path):
                logger.error(f"‚ùå PDF inv√°lido: {pdf_path}")
                return None
            
            # 1. Extrair CPF da pasta
            cpf_numerico = self._extrair_cpf_pasta(pdf_path)
            if not cpf_numerico:
                logger.error(f"‚ùå CPF inv√°lido na pasta: {Path(pdf_path).parent.name}")
                return None
            
            cpf_formatado = self._formatar_cpf(cpf_numerico)
            logger.info(f"üìã CPF esperado: {cpf_formatado}")
            
            # 2. Buscar TODOS os of√≠cios no PDF
            todos_oficios = self.detector.buscar_todos_oficios(pdf_path)
            
            if not todos_oficios:
                logger.warning("‚ö†Ô∏è Nenhum of√≠cio encontrado no PDF")
                return self._criar_resultado_erro(
                    cpf_numerico, 
                    pdf_path, 
                    "Nenhum of√≠cio detectado"
                )
            
            logger.info(f"üìÑ Encontrados {len(todos_oficios)} of√≠cio(s) no PDF")
            
            # 3. Encontrar of√≠cio com CPF correto
            oficio_correto = None
            for idx, oficio in enumerate(todos_oficios, 1):
                logger.info(f"üîç Verificando of√≠cio {idx}/{len(todos_oficios)} (p√°ginas {oficio['paginas']})")
                
                if self.detector.validar_cpf_no_oficio(oficio['texto'], cpf_formatado):
                    logger.info(f"‚úÖ CPF encontrado no of√≠cio {idx}!")
                    oficio_correto = oficio
                    break
                else:
                    logger.info(f"‚ùå CPF n√£o encontrado no of√≠cio {idx}")
            
            if not oficio_correto:
                logger.warning(f"‚ö†Ô∏è CPF {cpf_formatado} n√£o encontrado em nenhum of√≠cio")
                return self._criar_resultado_erro(
                    cpf_numerico,
                    pdf_path,
                    f"CPF {cpf_formatado} n√£o encontrado (PDF tem {len(todos_oficios)} of√≠cio(s))"
                )
            
            # 4. Detectar ANEXO II (ap√≥s of√≠cio correto)
            ultima_pag_oficio = oficio_correto['paginas'][-1]
            paginas_anexo, texto_anexo = self.detector_anexo.detectar_anexo_ii(pdf_path)
            
            # 5. Tentar extrair n√∫mero de ordem do T√çTULO do of√≠cio (PDFs antigos)
            numero_ordem_titulo = self.detector_proc.extrair_numero_ordem_do_titulo(
                oficio_correto['texto']
            )
            
            # 6. Detectar PROCESSAMENTO (PDFs novos) - buscar em mais p√°ginas
            inicio_proc = paginas_anexo[-1] - 1 if paginas_anexo else ultima_pag_oficio - 1
            pagina_proc, texto_proc = self.detector_proc.detectar_processamento(
                pdf_path,
                inicio=inicio_proc,
                limite=100  # Aumentar limite de busca
            )
            
            # 6.1. Verificar se of√≠cio foi REJEITADO (ANTES de validar!)
            # üî¥ REGRA CR√çTICA: Verificar ACEITA√á√ÉO primeiro (prioridade m√°xima)
            oficio_rejeitado = False
            motivo_rejeicao = None
            tem_processamento_com_informacao = False
            tem_numero_ordem = False
            
            # Verificar se tem PROCESSAMENTO COM INFORMA√á√ÉO ou n√∫mero de ordem
            if texto_proc:
                texto_upper = texto_proc.upper()
                if "PROCESSAMENTO COM INFORMA√á√ÉO" in texto_upper or "PROCESSAMENTO COM INFORMACAO" in texto_upper:
                    tem_processamento_com_informacao = True
                    logger.info("‚úÖ PROCESSAMENTO COM INFORMA√á√ÉO detectado ‚Üí Of√≠cio ACEITO")
                
                if self.detector_proc.extrair_numero_ordem(texto_proc):
                    tem_numero_ordem = True
                    logger.info("‚úÖ N√∫mero de ordem detectado ‚Üí Of√≠cio ACEITO")
            
            # üî¥ PRIORIDADE: Se tem PROCESSAMENTO COM INFORMA√á√ÉO ou n√∫mero de ordem ‚Üí N√ÉO √© rejeitado
            if tem_processamento_com_informacao or tem_numero_ordem:
                oficio_rejeitado = False
                logger.info("‚úÖ Of√≠cio ACEITO (tem PROCESSAMENTO COM INFORMA√á√ÉO ou n√∫mero de ordem)")
            else:
                # S√≥ verificar rejei√ß√£o se N√ÉO tem indicadores de aceita√ß√£o
                # Buscar rejei√ß√£o no texto do PROCESSAMENTO ou em p√°ginas pr√≥ximas
                if texto_proc and self.detector_proc.eh_oficio_rejeitado(texto_proc):
                    oficio_rejeitado = True
                    motivo_rejeicao = self.detector_proc.extrair_motivo_rejeicao(texto_proc)
                    logger.warning(f"‚ö†Ô∏è OF√çCIO REJEITADO detectado na p√°gina {pagina_proc}!")
                    if motivo_rejeicao:
                        logger.info(f"   Motivo: {motivo_rejeicao[:100]}...")
                else:
                    # Buscar rejei√ß√£o em p√°ginas pr√≥ximas ao of√≠cio
                    logger.debug("Buscando NOTA DE REJEI√á√ÉO em p√°ginas pr√≥ximas...")
                    for pag_offset in range(0, 50):
                        pag_busca = ultima_pag_oficio + pag_offset
                        try:
                            doc = pymupdf.open(pdf_path)
                            if pag_busca < len(doc):
                                texto_busca = doc.load_page(pag_busca).get_text()
                                if self.detector_proc.eh_oficio_rejeitado(texto_busca):
                                    oficio_rejeitado = True
                                    motivo_rejeicao = self.detector_proc.extrair_motivo_rejeicao(texto_busca)
                                    logger.warning(f"‚ö†Ô∏è OF√çCIO REJEITADO detectado na p√°gina {pag_busca + 1}!")
                                    if motivo_rejeicao:
                                        logger.info(f"   Motivo: {motivo_rejeicao[:100]}...")
                                    # Usar esse texto como PROCESSAMENTO
                                    if not texto_proc:
                                        texto_proc = texto_busca
                                        pagina_proc = pag_busca
                                    break
                            doc.close()
                        except Exception as e:
                            logger.debug(f"Erro ao buscar rejei√ß√£o na p√°gina {pag_busca}: {e}")
                        break
            
            # 7. Montar texto relevante (APENAS p√°ginas necess√°rias!)
            # CHUNKING: Se of√≠cio muito grande SEM ANEXO II/PROCESSAMENTO, reduzir
            paginas_oficio = oficio_correto['paginas']
            num_paginas = len(paginas_oficio)
            
            if num_paginas > 100 and not texto_anexo and not texto_proc:
                logger.warning(f"‚ö†Ô∏è Of√≠cio muito grande ({num_paginas} p√°ginas) sem ANEXO II/PROCESSAMENTO")
                logger.info(f"üîß Aplicando CHUNKING: primeiras 50 + √∫ltimas 50 p√°ginas")
                
                # Extrair apenas primeiras 50 + √∫ltimas 50 p√°ginas
                paginas_chunk = paginas_oficio[:50] + paginas_oficio[-50:]
                
                # Re-extrair texto apenas dessas p√°ginas
                doc = pymupdf.open(pdf_path)
                texto_chunk = ""
                for pag in paginas_chunk:
                    texto_chunk += doc.load_page(pag).get_text() + "\n"
                doc.close()
                
                texto_relevante = texto_chunk
                logger.info(f"üìÑ Texto reduzido: {len(texto_relevante):,} chars (100 p√°ginas)")
            else:
                texto_relevante = oficio_correto['texto']
            
            if texto_anexo:
                logger.info(f"üìã ANEXO II encontrado em {len(paginas_anexo)} p√°gina(s)")
                texto_relevante += f"\n\n{'='*60}\n=== ANEXO II ===\n{'='*60}\n\n{texto_anexo}"
            else:
                logger.warning("‚ö†Ô∏è ANEXO II n√£o encontrado")
            
            if texto_proc:
                if oficio_rejeitado:
                    logger.info(f"üìã NOTA DE REJEI√á√ÉO encontrada na p√°gina {pagina_proc}")
                    texto_relevante += f"\n\n{'='*60}\n=== NOTA DE REJEI√á√ÉO ===\n{'='*60}\n\n{texto_proc}"
                else:
                    logger.info(f"üìã PROCESSAMENTO encontrado na p√°gina {pagina_proc}")
                    texto_relevante += f"\n\n{'='*60}\n=== PROCESSAMENTO ===\n{'='*60}\n\n{texto_proc}"
            elif numero_ordem_titulo:
                logger.info(f"üìã N√∫mero de ordem extra√≠do do T√çTULO: {numero_ordem_titulo}")
            else:
                logger.warning("‚ö†Ô∏è PROCESSAMENTO n√£o encontrado e n√∫mero n√£o est√° no t√≠tulo")
            
            # 8. Verificar tamanho e aplicar chunking adicional se necess√°rio
            # Estimativa conservadora: 1 token ‚âà 2 chars (portugu√™s), limite 128k tokens ‚âà 256k chars
            # Deixar margem de seguran√ßa: 200k chars
            MAX_CHARS = 200_000
            
            if len(texto_relevante) > MAX_CHARS:
                logger.warning(f"‚ö†Ô∏è Texto muito grande ({len(texto_relevante):,} chars > {MAX_CHARS:,})")
                logger.info(f"üîß Aplicando CHUNKING AGRESSIVO: primeiras 30 + √∫ltimas 30 p√°ginas do of√≠cio")
                
                # Re-extrair com chunking mais agressivo
                paginas_chunk = paginas_oficio[:30] + paginas_oficio[-30:]
                
                doc = pymupdf.open(pdf_path)
                texto_chunk = ""
                for pag in paginas_chunk:
                    texto_chunk += doc.load_page(pag).get_text() + "\n"
                doc.close()
                
                texto_relevante = texto_chunk
                
                # Re-adicionar ANEXO II e PROCESSAMENTO (se houver)
                if texto_anexo:
                    texto_relevante += f"\n\n{'='*60}\n=== ANEXO II ===\n{'='*60}\n\n{texto_anexo}"
                if texto_proc:
                    if oficio_rejeitado:
                        texto_relevante += f"\n\n{'='*60}\n=== NOTA DE REJEI√á√ÉO ===\n{'='*60}\n\n{texto_proc}"
                    else:
                        texto_relevante += f"\n\n{'='*60}\n=== PROCESSAMENTO ===\n{'='*60}\n\n{texto_proc}"
                
                logger.info(f"üìÑ Texto reduzido: {len(texto_relevante):,} chars (60 p√°ginas + anexos)")
            
            # 9. Enviar ao LLM (muito menor!)
            logger.info(f"ü§ñ Enviando {len(texto_relevante):,} chars para GPT-4o-mini")
            logger.info(f"   P√°ginas enviadas: Of√≠cio {oficio_correto['paginas']} + ANEXO II {paginas_anexo} + PROC {[pagina_proc] if pagina_proc else []}")
            
            dados_oficio = self._extrair_dados_llm(
                texto_relevante, 
                tem_anexo_ii=bool(texto_anexo),
                tem_processamento=bool(texto_proc),
                numero_ordem_titulo=numero_ordem_titulo,
                oficio_rejeitado=oficio_rejeitado,
                motivo_rejeicao=motivo_rejeicao
            )
            
            if not dados_oficio:
                logger.error("‚ùå Falha na extra√ß√£o LLM")
                return self._criar_resultado_erro(
                    cpf_numerico,
                    pdf_path,
                    "Falha na extra√ß√£o LLM"
                )
            
            # 8. Validar com Pydantic
            try:
                oficio_validado = OficioRequisitorio(**dados_oficio)
                logger.info("‚úÖ Dados validados com sucesso")
            except Exception as e:
                logger.error(f"‚ùå Erro na valida√ß√£o Pydantic: {e}")
                return {
                    "cpf": cpf_numerico,
                    "pdf": Path(pdf_path).name,
                    "sucesso": False,
                    "cpf_validado": True,
                    "erro": f"Valida√ß√£o falhou: {e}",
                    "tempo_processamento": time.time() - inicio,
                    "num_oficios": len(todos_oficios)
                }
            
            # 8.1. Calcular flag IDOSO automaticamente
            if oficio_validado.data_nascimento:
                from datetime import date
                hoje = date.today()
                idade = hoje.year - oficio_validado.data_nascimento.year
                
                # Ajustar se ainda n√£o fez anivers√°rio este ano
                if (hoje.month, hoje.day) < (oficio_validado.data_nascimento.month, oficio_validado.data_nascimento.day):
                    idade -= 1
                
                # Atualizar flag idoso
                oficio_validado.idoso = (idade >= 60)
                logger.info(f"üéÇ Idade calculada: {idade} anos ‚Üí idoso={oficio_validado.idoso}")
            else:
                logger.debug("‚ö†Ô∏è data_nascimento n√£o dispon√≠vel, flag idoso n√£o calculada")
            
            # 9. Retornar resultado de sucesso
            logger.info("‚úÖ Processamento V2 conclu√≠do com sucesso!")
            return {
                "cpf": cpf_numerico,
                "pdf": Path(pdf_path).name,
                "sucesso": True,
                "cpf_validado": True,
                "dados": oficio_validado.model_dump(),
                "tempo_processamento": time.time() - inicio,
                "num_oficios": len(todos_oficios)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento V2: {e}")
            import traceback
            traceback.print_exc()
            return {
                "cpf": cpf_numerico,
                "pdf": Path(pdf_path).name,
                "sucesso": False,
                "cpf_validado": False,
                "erro": str(e),
                "tempo_processamento": time.time() - inicio,
                "num_oficios": 0
            }
    
    def _extrair_cpf_pasta(self, pdf_path: str) -> Optional[str]:
        """
        Extrai CPF do nome da pasta.
        
        Args:
            pdf_path: Caminho do PDF
            
        Returns:
            CPF (11 d√≠gitos) ou None se inv√°lido
        """
        try:
            cpf = Path(pdf_path).parent.name
            
            if not cpf.isdigit() or len(cpf) != 11:
                logger.error(f"CPF inv√°lido: {cpf} (deve ter 11 d√≠gitos)")
                return None
            
            return cpf
            
        except Exception as e:
            logger.error(f"Erro ao extrair CPF: {e}")
            return None
    
    def _formatar_cpf(self, cpf_numerico: str) -> str:
        """
        Formata CPF: 11671377877 ‚Üí 116.713.778-77
        
        Args:
            cpf_numerico: CPF com 11 d√≠gitos
            
        Returns:
            CPF formatado
        """
        if len(cpf_numerico) != 11:
            return cpf_numerico
        
        return f"{cpf_numerico[:3]}.{cpf_numerico[3:6]}.{cpf_numerico[6:9]}-{cpf_numerico[9:]}"
    
    def _criar_resultado_erro(
        self, 
        cpf: str, 
        pdf_path: str, 
        erro: str
    ) -> Dict[str, Any]:
        """
        Cria resultado de erro para an√°lise manual.
        
        Args:
            cpf: CPF do processo
            pdf_path: Caminho para o PDF
            erro: Mensagem de erro
            
        Returns:
            Dict com resultado do erro
        """
        return {
            "cpf": cpf,
            "pdf": Path(pdf_path).name,
            "sucesso": False,
            "cpf_validado": False,
            "erro": erro,
            "tempo_processamento": 0,
            "num_oficios": 0
        }
    
    def _extrair_dados_llm(
        self, 
        texto_oficio: str, 
        tem_anexo_ii: bool = False,
        tem_processamento: bool = False,
        numero_ordem_titulo: Optional[str] = None,
        oficio_rejeitado: bool = False,
        motivo_rejeicao: Optional[str] = None
    ) -> Optional[Dict[str, Any]]:
        """
        Extrai dados estruturados usando GPT-4o-mini.
        
        V2: Prompt atualizado com n√∫mero de ordem e ANEXO II completo.
        
        Args:
            texto_oficio: Texto relevante (of√≠cio + ANEXO II + PROCESSAMENTO)
            tem_anexo_ii: Se ANEXO II est√° presente
            tem_processamento: Se PROCESSAMENTO est√° presente
            numero_ordem_titulo: N√∫mero de ordem extra√≠do do t√≠tulo (PDFs antigos)
            oficio_rejeitado: Se o of√≠cio foi rejeitado
            motivo_rejeicao: Motivo da rejei√ß√£o (se houver)
            
        Returns:
            Dicion√°rio com dados extra√≠dos ou None
        """
        try:
            # Ajustar prompt se of√≠cio rejeitado
            nota_rejeicao = ""
            if oficio_rejeitado:
                nota_rejeicao = f"""
‚ö†Ô∏è ATEN√á√ÉO: Este of√≠cio foi REJEITADO pelo DEPRE!
- Extraia apenas os dados dispon√≠veis no documento
- Campos que n√£o estiverem dispon√≠veis devem ser null
- N√£o invente valores
- Marque rejeitado=true
"""
            
            # Adicionar nota sobre anomalias
            nota_anomalia = ""
            if len(texto_oficio) < 500:
                nota_anomalia = """
‚ö†Ô∏è ATEN√á√ÉO: Documento muito curto ou com formato an√¥malo!
- Se o documento n√£o seguir o padr√£o esperado, marque anomalia=true
- Descreva o problema encontrado em descricao_anomalia
- Extraia o que for poss√≠vel
"""
            
            # Prompt V2 otimizado
            prompt = f"""Voc√™ √© um assistente especializado em extrair dados de Of√≠cios Requisit√≥rios do TJSP.

IMPORTANTE: Retorne JSON com estrutura FLAT (campos no n√≠vel raiz), N√ÉO use objetos aninhados!

{nota_rejeicao}{nota_anomalia}

DOCUMENTO: Of√≠cio Requisit√≥rio do Tribunal de Justi√ßa de S√£o Paulo

=== CAMPOS OBRIGAT√ìRIOS (n√≠vel raiz do JSON) ===

- processo_origem: N√∫mero CNJ do processo (formato: 0000000-00.0000.0.00.0000)
- requerente_caps: Nome TODO EM MAI√öSCULAS
- numero_ordem: N√∫mero de ordem do RPV/Precat√≥rio (formato: XXXXX/YYYY)
  ‚ö†Ô∏è ATEN√á√ÉO - DIFEREN√áA CR√çTICA:
  * CORRETO: "644/2015", "2913/2023", "12345/2024" (formato: n√∫meros/ano)
  * ERRADO: "0181657-92.2021.8.26.0500" (isso √© n√∫mero do PROCESSO, n√£o n√∫mero de ordem!)
  * Buscar no T√çTULO: "OF√çCIO REQUISIT√ìRIO N¬∫ XXX/YYYY"
  * OU na se√ß√£o "PROCESSAMENTO": "N¬∫ de Ordem: XXX/YYYY" ou "Ordem: XXX/YYYY"
  * Se N√ÉO encontrar o n√∫mero de ordem, retorne null (n√£o invente!)
- valor_principal_liquido: Valor principal l√≠quido (n√∫mero decimal)
- valor_principal_bruto: Valor principal bruto (n√∫mero decimal)
- juros_moratorios: Juros morat√≥rios (n√∫mero decimal)
- valor_total_requisitado: Valor total requisitado (n√∫mero decimal)

=== CAMPOS OPCIONAIS (n√≠vel raiz do JSON) ===

DADOS BANC√ÅRIOS (ANEXO II):
- banco: C√≥digo do banco (apenas n√∫meros, ex: 341)
- agencia: N√∫mero da ag√™ncia
- conta: N√∫mero da conta (com d√≠gito)
- conta_tipo: Tipo de conta (corrente/poupan√ßa)
- dados_bancarios_advogado: Se dados s√£o do advogado (true/false)
- cpf_titular_conta: CPF do titular da conta

CONTRIBUI√á√ïES:
- contrib_previdenciaria_iprem: INST.PREV. ou IPREMSAOPAULO (n√∫mero)
- contrib_previdenciaria_hspm: ASSIST.M√âD. ou HSPMSAOPAULO (n√∫mero)

DATAS (formato YYYY-MM-DD):
- data_nascimento: Data de nascimento do credor
- data_base_atualizacao: Data base para atualiza√ß√£o
- data_ajuizamento: Data de ajuizamento
- data_transito_julgado: Data do tr√¢nsito em julgado

PREFER√äNCIAS (true/false):
- idoso: Credor com mais de 60 anos
- doenca_grave: Portador de doen√ßa grave
- pcd: Pessoa com defici√™ncia

OUTROS VALORES:
- tipo_levantamento: Tipo de levantamento
- valor_compensado: Valor compensado (n√∫mero)
- contribuicao_social: Contribui√ß√£o social (n√∫mero)
- salario_pericial: Sal√°rio pericial (n√∫mero)
- assist_tecnico: Assistente t√©cnico (n√∫mero)
- custas: Custas (n√∫mero)
- despesas: Despesas (n√∫mero)
- multas: Multas (n√∫mero)

OUTRAS INFORMA√á√ïES:
- vara: Vara respons√°vel
- credor_nome: Nome do credor
- credor_cpf_cnpj: CPF/CNPJ do credor
- devedor_ente: Ente devedor
- advogado_nome: Nome do advogado
- advogado_oab: OAB do advogado

CONTROLE:
- rejeitado: Se o of√≠cio foi rejeitado (true/false)
- motivo_rejeicao: Motivo da rejei√ß√£o (se houver)
- anomalia: Se o PDF tem formato an√¥malo (true/false)
- descricao_anomalia: Descri√ß√£o do problema encontrado (se houver)

=== REGRAS CR√çTICAS ===

1. ESTRUTURA: JSON FLAT (todos os campos no n√≠vel raiz, SEM objetos aninhados)
2. Campos n√£o encontrados = null
3. Valores num√©ricos: SEM R$, SEM pontos de milhar, v√≠rgula = ponto decimal
4. Datas: formato YYYY-MM-DD
5. Requerente: SEMPRE em MAI√öSCULAS
6. Booleanos: true ou false (min√∫sculas)
7. N√∫mero de ordem: buscar na se√ß√£o "PROCESSAMENTO" (formato: XXX/YYYY)

EXEMPLO DE ESTRUTURA CORRETA:
{{
  "processo_origem": "0035938-67.2018.8.26.0053",
  "requerente_caps": "REGINA APARECIDA NARDES GARCIA DIAS",
  "numero_ordem": "2913/2023",
  "valor_principal_liquido": 17753.80,
  "valor_principal_bruto": 37993.13,
  "juros_moratorios": 20239.33,
  "valor_total_requisitado": 37993.13,
  "banco": "341",
  "agencia": "3740",
  "conta": "00000001341-6",
  "vara": "1¬™ VARA DE FAZENDA P√öBLICA",
  "data_base_atualizacao": "2020-02-29",
  "idoso": false
}}

ATEN√á√ÉO: numero_ordem √© diferente de processo_origem!
- processo_origem: 0035938-67.2018.8.26.0053 (n√∫mero CNJ do processo)
- numero_ordem: 2913/2023 (n√∫mero do of√≠cio/precat√≥rio)

DOCUMENTO:
{texto_oficio}

Retorne APENAS JSON FLAT v√°lido:"""

            # Chamar GPT-4o-mini
            response = self.client.chat.completions.create(
                model=self.modelo_gpt,
                messages=[
                    {
                        "role": "system",
                        "content": "Voc√™ √© um assistente especializado em extra√ß√£o de dados estruturados de documentos jur√≠dicos. Retorne apenas JSON v√°lido."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0,  # Determin√≠stico
                response_format={"type": "json_object"}
            )
            
            # Extrair JSON da resposta
            json_str = response.choices[0].message.content
            
            # Parse JSON
            dados = json.loads(json_str)
            
            # Se n√∫mero de ordem foi extra√≠do do t√≠tulo e LLM n√£o encontrou, usar o do t√≠tulo
            if numero_ordem_titulo and not dados.get('numero_ordem'):
                logger.info(f"üìã Usando n√∫mero de ordem do t√≠tulo: {numero_ordem_titulo}")
                dados['numero_ordem'] = numero_ordem_titulo
            
            # Adicionar flag de rejei√ß√£o se detectada
            if oficio_rejeitado:
                dados['rejeitado'] = True
                if motivo_rejeicao and not dados.get('motivo_rejeicao'):
                    dados['motivo_rejeicao'] = motivo_rejeicao
            
            # Adicionar observa√ß√µes sobre campos n√£o encontrados
            campos_ausentes = []
            campos_obrigatorios = [
                'valor_principal_liquido', 'valor_principal_bruto', 
                'juros_moratorios', 'valor_total_requisitado'
            ]
            
            for campo in campos_obrigatorios:
                if not dados.get(campo):
                    campos_ausentes.append(campo)
            
            if campos_ausentes and not dados.get('observacoes'):
                obs = f"Campos n√£o encontrados: {', '.join(campos_ausentes)}"
                dados['observacoes'] = obs
                logger.warning(f"‚ö†Ô∏è {obs}")
            
            # Detectar anomalias (formato n√£o padr√£o)
            if dados.get('anomalia') and not dados.get('descricao_anomalia'):
                dados['descricao_anomalia'] = "PDF com formato an√¥malo detectado pelo LLM"
            
            logger.debug(f"Dados extra√≠dos: {list(dados.keys())}")
            return dados
            
        except json.JSONDecodeError as e:
            logger.error(f"Erro ao fazer parse do JSON: {e}")
            logger.error(f"Resposta do LLM: {json_str[:500]}...")
            return None
        except Exception as e:
            logger.error(f"Erro na chamada LLM: {e}")
            return None
    
    def salvar_postgres(self, resultado: Dict[str, Any]) -> bool:
        """
        Salva dados no PostgreSQL (upsert).
        
        Args:
            oficio_completo: Objeto completo para salvar
            
        Returns:
            True se salvou com sucesso
        """
        # TODO: Implementar quando necess√°rio
        logger.warning("salvar_postgres() n√£o implementado na V2")
        return False
